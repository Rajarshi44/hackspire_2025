openapi: 3.0.3
info:
  title: MCP Code Generation API
  description: |
    AI-powered code generation endpoint for GitHub issues. This endpoint automates the process of generating code fixes for GitHub issues by:
    - Verifying user assignment to issues
    - Analyzing repository context
    - Generating code fixes using AI
    - Validating TypeScript code
    - Creating draft pull requests
  version: 1.0.0
  contact:
    name: GitPulse MCP Team
    email: support@gitpulse.dev

servers:
  - url: http://localhost:9002
    description: Local Development Server
  - url: https://your-production-domain.com
    description: Production Server

tags:
  - name: MCP
    description: Model Context Protocol endpoints for AI code generation
  - name: GitHub Tools
    description: Robust GitHub API utility functions with retry logic and error handling
  - name: Patch Utils
    description: Unified diff parsing and repository patching utilities

paths:
  /api/mcp/generate-code:
    get:
      summary: Get API Documentation
      description: Returns endpoint documentation and usage information
      tags:
        - MCP
      responses:
        '200':
          description: API documentation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: MCP Code Generation API
                  version:
                    type: string
                    example: 1.0.0
                  description:
                    type: string
                    example: AI-powered code generation endpoint for GitHub issues
                  endpoint:
                    type: string
                    example: POST /api/mcp/generate-code
                  requestBody:
                    type: object
                  responses:
                    type: object
                  authentication:
                    type: string
                    example: Requires GITHUB_TOKEN environment variable

    post:
      summary: Generate Code for GitHub Issue
      description: |
        Generates AI-powered code fixes for a GitHub issue. The endpoint performs the following steps:
        1. Fetches issue metadata and verifies user assignment
        2. Creates a new branch
        3. Selects relevant files for code generation
        4. Generates code fixes using AI
        5. Validates generated TypeScript code
        6. Commits changes atomically
        7. Creates a draft pull request
        8. Updates Firestore job status
        9. Posts a comment on the issue
      tags:
        - MCP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPGenerateCodeRequest'
            examples:
              withRelatedFiles:
                summary: Request with specific files
                value:
                  owner: Rajarshi44
                  repo: hackspire_2025
                  issue_number: 42
                  jobId: job-20250131-143052
                  requested_by: Rajarshi44
                  related_files:
                    - src/app/page.tsx
                    - src/components/chat-interface.tsx
              withoutRelatedFiles:
                summary: Request with AI file selection
                value:
                  owner: Rajarshi44
                  repo: hackspire_2025
                  issue_number: 42
                  jobId: job-20250131-143052
                  requested_by: Rajarshi44

      responses:
        '200':
          description: Code generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPSuccessResponse'
              example:
                success: true
                jobId: job-20250131-143052
                pr_url: https://github.com/Rajarshi44/hackspire_2025/pull/43
                pr_number: 43
                branch: gitpulse/issue-42/draft-1738335052000

        '400':
          description: Bad Request - Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPErrorResponse'
              example:
                success: false
                jobId: unknown
                error: Invalid request payload
                details: "owner: Required; repo: Required"

        '403':
          description: Forbidden - User not assigned to issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPErrorResponse'
              example:
                success: false
                jobId: Rajarshi44
                error: Not authorized
                details: "User Rajarshi44 is not assigned to this issue. Assignees: john_doe, jane_smith"

        '422':
          description: Unprocessable Entity - TypeScript validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPErrorResponse'
              example:
                success: false
                jobId: unknown
                error: Validation failed
                details: "TypeScript validation failed: src/app/page.tsx(15,10): error TS2304: Cannot find name 'UnknownType'."

        '429':
          description: Too Many Requests - GitHub API rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPErrorResponse'
              example:
                success: false
                jobId: unknown
                error: Rate limit exceeded
                details: "GitHub API rate limit exceeded. Resets at 2025-01-31T15:00:00Z"

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPErrorResponse'
              example:
                success: false
                jobId: unknown
                error: Internal server error
                details: An unexpected error occurred

components:
  schemas:
    MCPGenerateCodeRequest:
      type: object
      required:
        - owner
        - repo
        - issue_number
        - jobId
        - requested_by
      properties:
        owner:
          type: string
          description: GitHub repository owner/organization name
          example: Rajarshi44
          minLength: 1
        repo:
          type: string
          description: GitHub repository name
          example: hackspire_2025
          minLength: 1
        issue_number:
          type: integer
          description: GitHub issue number
          example: 42
          minimum: 1
        jobId:
          type: string
          description: Unique job identifier for tracking
          example: job-20250131-143052
          minLength: 1
        requested_by:
          type: string
          description: GitHub username of the requester (must be assigned to issue)
          example: Rajarshi44
          minLength: 1
        related_files:
          type: array
          description: Optional list of specific files to analyze. If not provided, AI will select relevant files.
          items:
            type: string
          example:
            - src/app/page.tsx
            - src/components/chat-interface.tsx

    MCPSuccessResponse:
      type: object
      required:
        - success
        - jobId
        - pr_url
        - pr_number
        - branch
      properties:
        success:
          type: boolean
          description: Indicates successful code generation
          example: true
        jobId:
          type: string
          description: Job identifier from the request
          example: job-20250131-143052
        pr_url:
          type: string
          format: uri
          description: URL of the created draft pull request
          example: https://github.com/Rajarshi44/hackspire_2025/pull/43
        pr_number:
          type: integer
          description: GitHub pull request number
          example: 43
        branch:
          type: string
          description: Name of the created branch
          example: gitpulse/issue-42/draft-1738335052000

    MCPErrorResponse:
      type: object
      required:
        - success
        - jobId
        - error
      properties:
        success:
          type: boolean
          description: Indicates failure
          example: false
        jobId:
          type: string
          description: Job identifier or 'unknown'
          example: unknown
        error:
          type: string
          description: Error category
          enum:
            - Invalid request payload
            - Not authorized
            - Validation failed
            - Rate limit exceeded
            - GitHub API error
            - Internal server error
          example: Not authorized
        details:
          type: string
          description: Detailed error message
          example: User Rajarshi44 is not assigned to this issue.

    # GitHub Tools Schemas
    IssueContextResponse:
      type: object
      required:
        - issue
        - comments
      properties:
        issue:
          type: object
          properties:
            number:
              type: integer
              example: 42
            title:
              type: string
              example: Fix authentication bug
            body:
              type: string
              nullable: true
            state:
              type: string
              enum: [open, closed]
            html_url:
              type: string
              format: uri
            user:
              $ref: '#/components/schemas/GitHubUser'
            assignees:
              type: array
              items:
                $ref: '#/components/schemas/GitHubUser'
            labels:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  color:
                    type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'

    CreateBranchRequest:
      type: object
      required:
        - owner
        - repo
        - newBranch
        - baseBranch
      properties:
        owner:
          type: string
          example: Rajarshi44
        repo:
          type: string
          example: hackspire_2025
        newBranch:
          type: string
          example: feature/new-feature
        baseBranch:
          type: string
          example: main

    BranchResponse:
      type: object
      properties:
        ref:
          type: string
          example: refs/heads/feature/new-feature
        url:
          type: string
          format: uri
        object:
          type: object
          properties:
            sha:
              type: string
              example: abc123def456
            type:
              type: string
              example: commit
            url:
              type: string
              format: uri

    CreateOrUpdateFileRequest:
      type: object
      required:
        - owner
        - repo
        - path
        - content
        - branch
        - commitMessage
      properties:
        owner:
          type: string
          example: Rajarshi44
        repo:
          type: string
          example: hackspire_2025
        path:
          type: string
          example: src/components/new-component.tsx
        content:
          type: string
          description: File content (will be base64 encoded automatically)
          example: "import React from 'react';\n\nexport default function NewComponent() {\n  return <div>Hello</div>;\n}"
        branch:
          type: string
          example: feature/new-feature
        commitMessage:
          type: string
          example: Add new component

    FileResponse:
      type: object
      properties:
        content:
          type: object
          properties:
            name:
              type: string
            path:
              type: string
            sha:
              type: string
            size:
              type: integer
            url:
              type: string
              format: uri
            html_url:
              type: string
              format: uri
        commit:
          type: object
          properties:
            sha:
              type: string
            url:
              type: string
              format: uri
            html_url:
              type: string
              format: uri
            message:
              type: string

    CreateDraftPRRequest:
      type: object
      required:
        - owner
        - repo
        - headBranch
        - baseBranch
        - title
        - body
      properties:
        owner:
          type: string
          example: Rajarshi44
        repo:
          type: string
          example: hackspire_2025
        headBranch:
          type: string
          example: feature/new-feature
        baseBranch:
          type: string
          example: main
        title:
          type: string
          example: Add new feature
        body:
          type: string
          example: |
            ## Summary
            This PR adds a new feature...
            
            Closes #42

    PullRequestResponse:
      type: object
      properties:
        number:
          type: integer
          example: 43
        html_url:
          type: string
          format: uri
          example: https://github.com/Rajarshi44/hackspire_2025/pull/43
        title:
          type: string
        body:
          type: string
          nullable: true
        state:
          type: string
          enum: [open, closed]
        draft:
          type: boolean
          example: true

    ReviewComment:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        path:
          type: string
          description: File path this comment is on
        position:
          type: integer
          nullable: true
        line:
          type: integer
          nullable: true
        commit_id:
          type: string
        diff_hunk:
          type: string
        user:
          $ref: '#/components/schemas/GitHubUser'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        html_url:
          type: string
          format: uri

    PostCommentRequest:
      type: object
      required:
        - owner
        - repo
        - body
      properties:
        owner:
          type: string
          example: Rajarshi44
        repo:
          type: string
          example: hackspire_2025
        body:
          type: string
          example: Great work! LGTM 👍

    CommentResponse:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        user:
          $ref: '#/components/schemas/GitHubUser'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        html_url:
          type: string
          format: uri

    GitHubUser:
      type: object
      properties:
        login:
          type: string
          example: Rajarshi44
        id:
          type: integer
        avatar_url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri

    GitHubError:
      type: object
      properties:
        message:
          type: string
          example: Not Found
        documentation_url:
          type: string
          format: uri
        statusCode:
          type: integer
          example: 404

    # Patch Utils Schemas
    ParseDiffRequest:
      type: object
      required:
        - diffString
      properties:
        diffString:
          type: string
          description: Unified diff string (output from git diff)
          example: |
            diff --git a/file.js b/file.js
            index abc123..def456 100644
            --- a/file.js
            +++ b/file.js
            @@ -1,3 +1,4 @@
             line 1
            +line 2 added
             line 3

    ParseDiffResponse:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: '#/components/schemas/FileChange'

    FileChange:
      type: object
      properties:
        path:
          type: string
          description: File path relative to repository root
          example: src/components/Button.tsx
        newContent:
          type: string
          description: New file content (may be truncated)
          example: "import React from 'react';\n\nexport default function Button() {...}"
        isNew:
          type: boolean
          description: Whether this is a new file
          example: false
        isTruncated:
          type: boolean
          description: Whether content was truncated to size limit
          example: false
        originalSize:
          type: integer
          description: Original content size in characters
          example: 1250
        truncatedSize:
          type: integer
          description: Truncated content size in characters
          example: 1250

    ApplyPatchRequest:
      type: object
      required:
        - owner
        - repo
        - branch
        - diffString
      properties:
        owner:
          type: string
          description: Repository owner
          example: Rajarshi44
        repo:
          type: string
          description: Repository name
          example: hackspire_2025
        branch:
          type: string
          description: Target branch name
          example: feature/new-feature
        diffString:
          type: string
          description: Unified diff string to apply
          example: |
            diff --git a/file.js b/file.js
            --- a/file.js
            +++ b/file.js
            @@ -1 +1,2 @@
             line 1
            +line 2
        commitMessage:
          type: string
          description: Commit message template (file path will be appended)
          default: Apply patch
          example: Apply automated fixes

    ApplyPatchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PatchResult'
        summary:
          type: object
          properties:
            total:
              type: integer
              example: 5
            successful:
              type: integer
              example: 4
            failed:
              type: integer
              example: 1

    PatchResult:
      type: object
      properties:
        path:
          type: string
          example: src/components/Button.tsx
        success:
          type: boolean
          example: true
        isNew:
          type: boolean
          example: false
        isTruncated:
          type: boolean
          example: false
        error:
          type: string
          description: Error message (only present if success is false)
          example: GitHub API error: Not Found
        statusCode:
          type: integer
          description: HTTP status code (only present if error occurred)
          example: 404

  securitySchemes:
    GitHubToken:
      type: apiKey
      in: header
      name: GITHUB_TOKEN
      description: |
        GitHub Personal Access Token (Classic) configured via environment variable.
        Required scopes: `repo` (Full control of private repositories)
        
        Generate at: https://github.com/settings/tokens/new

security:
  - GitHubToken: []

  /api/github-tools/issue-context:
    get:
      summary: Get Issue Context
      description: |
        Retrieves comprehensive context for a GitHub issue including:
        - Issue details (title, body, labels, assignees, state)
        - All issue comments with user information
        - Timestamps and URLs
      tags:
        - GitHub Tools
      parameters:
        - name: owner
          in: query
          required: true
          schema:
            type: string
          description: GitHub repository owner
          example: Rajarshi44
        - name: repo
          in: query
          required: true
          schema:
            type: string
          description: Repository name
          example: hackspire_2025
        - name: issue_number
          in: query
          required: true
          schema:
            type: integer
          description: Issue number
          example: 42
      responses:
        '200':
          description: Issue context retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueContextResponse'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

  /api/github-tools/branch:
    post:
      summary: Create Branch
      description: Creates a new branch from a base branch in a repository
      tags:
        - GitHub Tools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBranchRequest'
      responses:
        '200':
          description: Branch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchResponse'
        '404':
          description: Base branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'
        '422':
          description: Branch already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

  /api/github-tools/file:
    put:
      summary: Create or Update File
      description: |
        Creates a new file or updates an existing file in a repository.
        Automatically handles:
        - Base64 encoding for text and binary content
        - File existence detection
        - SHA retrieval for updates
      tags:
        - GitHub Tools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateFileRequest'
      responses:
        '200':
          description: File created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '404':
          description: Repository or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'
        '409':
          description: Conflict - file was modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

  /api/github-tools/pull-request:
    post:
      summary: Create Draft Pull Request
      description: Creates a draft pull request from head branch to base branch
      tags:
        - GitHub Tools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDraftPRRequest'
      responses:
        '200':
          description: Draft PR created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestResponse'
        '404':
          description: Repository or branches not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'
        '422':
          description: PR already exists or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

  /api/github-tools/pull-request/{pr_number}/comments:
    get:
      summary: List PR Review Comments
      description: Retrieves all review comments (line-specific) on a pull request
      tags:
        - GitHub Tools
      parameters:
        - name: owner
          in: query
          required: true
          schema:
            type: string
          example: Rajarshi44
        - name: repo
          in: query
          required: true
          schema:
            type: string
          example: hackspire_2025
        - name: pr_number
          in: path
          required: true
          schema:
            type: integer
          example: 43
      responses:
        '200':
          description: Review comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewComment'
        '404':
          description: PR not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

    post:
      summary: Post PR Comment
      description: Posts a general comment on a pull request (not a review comment)
      tags:
        - GitHub Tools
      parameters:
        - name: pr_number
          in: path
          required: true
          schema:
            type: integer
          example: 43
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentRequest'
      responses:
        '200':
          description: Comment posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '404':
          description: PR not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

  /api/github-tools/issue/{issue_number}/comments:
    post:
      summary: Post Issue Comment
      description: Posts a comment on a GitHub issue
      tags:
        - GitHub Tools
      parameters:
        - name: issue_number
          in: path
          required: true
          schema:
            type: integer
          example: 42
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentRequest'
      responses:
        '200':
          description: Comment posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubError'

  /api/patch-utils/parse-diff:
    post:
      summary: Parse Unified Diff
      description: |
        Parses a unified diff string (git diff output) and extracts file changes.
        Returns an array of file changes with path, content, and metadata.
        Automatically skips deleted and binary files, and truncates content to prevent huge uploads.
      tags:
        - Patch Utils
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParseDiffRequest'
      responses:
        '200':
          description: Diff parsed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseDiffResponse'
              example:
                changes:
                  - path: src/components/Button.tsx
                    newContent: "import React from 'react';\n\nexport default function Button() {\n  return <button>Click</button>;\n}"
                    isNew: false
                    isTruncated: false
                    originalSize: 95
                    truncatedSize: 95
                  - path: src/utils/helper.ts
                    newContent: "export const helper = () => 'test';"
                    isNew: true
                    isTruncated: false
                    originalSize: 38
                    truncatedSize: 38
        '400':
          description: Invalid diff string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: diffString must be a non-empty string

  /api/patch-utils/apply-patch:
    post:
      summary: Apply Patch to Repository
      description: |
        Parses a unified diff and applies all changes to a GitHub repository by committing
        each modified file to the specified branch. Uses the GitHub API to create/update files.
        
        Features:
        - Parses unified diff format
        - Commits each file individually
        - Progress logging for each file
        - Individual error handling (continues on failure)
        - Summary statistics at the end
      tags:
        - Patch Utils
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyPatchRequest'
      responses:
        '200':
          description: Patch applied successfully (check results for per-file status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyPatchResponse'
              example:
                results:
                  - path: src/components/Button.tsx
                    success: true
                    isNew: false
                    isTruncated: false
                  - path: src/utils/helper.ts
                    success: true
                    isNew: true
                    isTruncated: false
                summary:
                  total: 2
                  successful: 2
                  failed: 0
        '400':
          description: Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: owner, repo, branch, and diffString are required parameters
        '500':
          description: Error applying patch
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/PatchResult'

externalDocs:
  description: Complete Setup Guide
  url: https://github.com/Rajarshi44/hackspire_2025/blob/main/MCP_SETUP_GUIDE.md
